import streamlit as st
import pandas as pd
import numpy as np
import joblib
import re
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt

st.set_page_config(
    page_title="Tiki Product Analysis",
    page_icon="üìä",
    layout="wide"
)

# H√†m x·ª≠ l√Ω vƒÉn b·∫£n
def preprocess_text(text):
    if isinstance(text, str):
        # Chuy·ªÉn vƒÉn b·∫£n v·ªÅ ch·ªØ th∆∞·ªùng
        text = text.lower()
        
        # Lo·∫°i b·ªè d·∫•u c√¢u v√† c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
        text = re.sub(r'[^\w\s]', ' ', text)
        
        # Lo·∫°i b·ªè ch·ªØ s·ªë
        text = re.sub(r'\d+', ' ', text)
        
        # Lo·∫°i b·ªè c√°c kho·∫£ng tr·∫Øng th·ª´a
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text
    return ""

# T·∫£i c√°c m√¥ h√¨nh v√† d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u
@st.cache_resource
def load_models():
    # M√¥ h√¨nh ph√¢n lo·∫°i
    classifier = joblib.load('product_category_model.pkl') 
    tfidf_naiye = joblib.load('tfidf_naiye.pkl')
    # M√¥ h√¨nh d·ª± ƒëo√°n l∆∞·ª£ng b√°n
    sales_model = joblib.load('quantity_sold_prediction_model.pkl')
    sales_scaler = joblib.load('sales_scaler.pkl')
    sales_tfidf = joblib.load('sales_tfidf.pkl')
    sales_features = joblib.load('sales_features.pkl')

    # Danh m·ª•c 
    categories = joblib.load('category_mapping.pkl')
    
    return {
        'classifier': classifier,
        'tfidf_naiye': tfidf_naiye,
        'sales_model': sales_model,
        'sales_scaler': sales_scaler,
        'sales_tfidf': sales_tfidf,
        'sales_features': sales_features,
        'categories': categories
    }
try:
    models = load_models()
except:
    st.stop()

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("Tiki Product Analytics")
st.markdown("### Ph√¢n t√≠ch, d·ª± ƒëo√°n v√† ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m")
# Th√™m m√†u s·∫Øc cho ti√™u ƒë·ªÅ

# Tab cho c√°c ch·ª©c nƒÉng kh√°c nhau
tab1, tab2 = st.tabs(["Ph√¢n lo·∫°i s·∫£n ph·∫©m", "D·ª± ƒëo√°n l∆∞·ª£ng b√°n"])

# Tab 1: Ph√¢n lo·∫°i s·∫£n ph·∫©m
with tab1:
    st.header("Ph√¢n lo·∫°i s·∫£n ph·∫©m")
    # Nh·∫≠p th√¥ng tin s·∫£n ph·∫©m
    product_name = st.text_input("Nh·∫≠p t√™n s·∫£n ph·∫©m:", "S√°ch Digital Marketing")
    if st.button("Ph√¢n lo·∫°i"):
        if product_name:
            # Ti·ªÅn x·ª≠ l√Ω t√™n s·∫£n ph·∫©m
            processed_name = preprocess_text(product_name)
            # Chuy·ªÉn ƒë·ªïi t√™n s·∫£n ph·∫©m th√†nh vector TF-IDF
            tfidf_vector = models['tfidf_naiye'].transform([processed_name]).toarray()
            # D·ª± ƒëo√°n danh m·ª•c
            prediction = models['classifier'].predict(tfidf_vector)[0]
            probabilities = models['classifier'].predict_proba(tfidf_vector)[0]
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.success(f"Danh m·ª•c d·ª± ƒëo√°n: **{prediction}**")
            
            # Hi·ªÉn th·ªã top 3 danh m·ª•c c√≥ x√°c su·∫•t cao nh·∫•t
            categories = models['classifier'].classes_
            top3_indices = probabilities.argsort()[-3:][::-1]
            top3_categories = categories[top3_indices]
            top3_probabilities = probabilities[top3_indices]
            
            # V·∫Ω bi·ªÉu ƒë·ªì
            fig, ax = plt.subplots()
            # D√πng m√†u cmap
            colors = plt.cm.Greens(np.linspace(1, 0.5, len(top3_categories)))
            bars = ax.bar(top3_categories, top3_probabilities * 100, color=colors)
            ax.set_ylabel('X√°c su·∫•t (%)')
            ax.set_xlabel('Danh m·ª•c')
            # In nghi√™ng t√™n danh m·ª•c ·ªü tr·ª•c x
            ax.set_xticklabels(top3_categories, rotation=45, ha='right', fontsize=10, fontstyle='italic')
            ax.set_title('Top 3 danh m·ª•c s·∫£n ph·∫©m c√≥ x√°c su·∫•t thu·ªôc v·ªÅ cao nh·∫•t')
            st.pyplot(fig)
        else:
            st.warning("Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m.")

# Tab 2: D·ª± ƒëo√°n l∆∞·ª£ng b√°n
with tab2:
    st.header("D·ª± ƒëo√°n l∆∞·ª£ng b√°n")
    
    # Form nh·∫≠p th√¥ng tin s·∫£n ph·∫©m
    col1, col2 = st.columns(2)
    
    # L·∫•y √°nh x·∫° danh m·ª•c
    category_mapping = models['categories']
    
    # T·∫°o √°nh x·∫° ng∆∞·ª£c ƒë·ªÉ l·∫•y m√£ danh m·ª•c t·ª´ t√™n hi·ªÉn th·ªã
    reverse_category_mapping = {v: k for k, v in category_mapping.items()}
    
    # L·∫•y danh s√°ch t√™n hi·ªÉn th·ªã c·ªßa c√°c danh m·ª•c ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp
    display_categories = sorted(category_mapping.values())
    
    with col1:
        name = st.text_input("T√™n s·∫£n ph·∫©m:", "S√°ch Digital Marketing")
        price = st.number_input("Gi√° (VNƒê):", min_value=1000, value=150000, step=10000)
        list_price = st.number_input("Gi√° ni√™m y·∫øt (VNƒê):", min_value=1000, value=200000, step=10000)
    
    with col2:
        # S·ª≠ d·ª•ng t√™n hi·ªÉn th·ªã th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng
        selected_category_name = st.selectbox("Danh m·ª•c:", display_categories)
        
        # Chuy·ªÉn ƒë·ªïi l·∫°i th√†nh m√£ danh m·ª•c cho x·ª≠ l√Ω b√™n trong
        selected_category_code = reverse_category_mapping[selected_category_name]
        
        review_count = st.number_input("S·ªë l∆∞·ª£ng ƒë√°nh gi√° (Reviews) hi·ªán t·∫°i:", min_value=0, value=10, step=1)
        has_discount = st.checkbox("C√≥ gi·∫£m gi√°")
    
    # T√≠nh discount v√† discount_rate n·∫øu c√≥ gi·∫£m gi√°
    if has_discount:
        discount = list_price - price
        discount_rate = int((discount/list_price) * 100)
    else:
        discount = 0
        discount_rate = 0
    
    if st.button("D·ª± ƒëo√°n l∆∞·ª£ng b√°n"):
            # Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
            processed_name = preprocess_text(name)
            
            # M√£ h√≥a danh m·ª•c - s·ª≠ d·ª•ng category_encoder ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a tr∆∞·ªõc ƒë√≥ ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
            # N·∫øu c√≥ category_encoder c·ª• th·ªÉ, h√£y s·ª≠ d·ª•ng n√≥
            try:
                category_encoder = models.get('category_encoder', {})
                category_encoded = category_encoder.get(selected_category_code, 0)
            except:
                # Fallback ƒë∆°n gi·∫£n n·∫øu kh√¥ng c√≥ encoder
                category_encoded = {
                    'nha-sach-tiki': 0,
                    'dien-thoai-may-tinh-bang': 1,
                    'thiet-bi-kts-phu-kien-so': 2
                }.get(selected_category_code, 0)
            
            # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·∫ßu v√†o
            numeric_input = np.array([[price, list_price, discount, discount_rate, review_count, has_discount, category_encoded]])
            
            # Chuy·ªÉn ƒë·ªïi t√™n s·∫£n ph·∫©m th√†nh vector TF-IDF
            tfidf_vector = models['sales_tfidf'].transform([processed_name]).toarray()
            
            # K·∫øt h·ª£p d·ªØ li·ªáu
            X_input = np.hstack([numeric_input, tfidf_vector])
            
            # Chu·∫©n h√≥a d·ªØ li·ªáu
            X_scaled = models['sales_scaler'].transform(X_input)
            
            # D·ª± ƒëo√°n
            log_prediction = models['sales_model'].predict(X_scaled)[0]
            prediction = np.expm1(log_prediction)  # Chuy·ªÉn ƒë·ªïi t·ª´ log scale
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.success(f"L∆∞·ª£ng b√°n d·ª± ki·∫øn: **{int(prediction):,} s·∫£n ph·∫©m**")

# Th√™m icon 
st.markdown("<hr>", unsafe_allow_html=True)
st.sidebar.image("https://salt.tikicdn.com/ts/upload/0e/07/78/ee828743c9afa9792cf20d75995e134e.png", width=100)
st.markdown("Ph√°t tri·ªÉn b·ªüi Nh√≥m 4 | D·ªØ li·ªáu t·ª´ Tiki.vn")